name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-rest-app:${{ github.sha }} .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-rest-app:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-rest-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-rest-app:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Login to Docker Hub
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-rest-app:latest
            
            # Stop and remove old container
            docker stop spring-rest-app || true
            docker rm spring-rest-app || true
            
            # Run new container
            docker run -d \
              --name spring-rest-app \
              --restart unless-stopped \
              -p 32000:8080 \
              -e DB_SERVER=${{ secrets.DB_SERVER }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }} \
              ${{ secrets.DOCKER_USERNAME }}/parking_control_db:latest
            
            # Clean up old images
            docker image prune -af --filter "until=24h"

